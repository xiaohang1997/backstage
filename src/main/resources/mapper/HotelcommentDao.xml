<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dwh.backstage.dao.HotelcommentDao">

    <resultMap type="com.dwh.backstage.entity.Hotelcomment" id="HotelcommentMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="hotelid" column="hotelId" jdbcType="INTEGER"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="userid" column="userId" jdbcType="INTEGER"/>
        <result property="createdate" column="createdate" jdbcType="OTHER"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="HotelcommentMap">
        select id,
               hotelId,
               content,
               userId,
               createdate
        from my_travel.hotelcomment
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="HotelcommentMap">
        select id,
               hotelId,
               content,
               userId,
               createdate
        from my_travel.hotelcomment
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="HotelcommentMap">
        select
        id, hotelId, content, userId, createdate
        from my_travel.hotelcomment
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="hotelid != null">
                and hotelId = #{hotelid}
            </if>
            <if test="content != null and content != ''">
                and content = #{content}
            </if>
            <if test="userid != null">
                and userId = #{userid}
            </if>
            <if test="createdate != null">
                and createdate = #{createdate}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into my_travel.hotelcomment(hotelId, content, userId, createdate)
        values (#{hotelid}, #{content}, #{userid}, #{createdate})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into my_travel.hotelcomment(hotelId, content, userId, createdate)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.hotelid}, #{entity.content}, #{entity.userid}, #{entity.createdate})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into my_travel.hotelcomment(hotelId, content, userId, createdate)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.hotelid}, #{entity.content}, #{entity.userid}, #{entity.createdate})
        </foreach>
        on duplicate key update
        hotelId = values(hotelId) , content = values(content) , userId = values(userId) , createdate =
        values(createdate)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update my_travel.hotelcomment
        <set>
            <if test="hotelid != null">
                hotelId = #{hotelid},
            </if>
            <if test="content != null and content != ''">
                content = #{content},
            </if>
            <if test="userid != null">
                userId = #{userid},
            </if>
            <if test="createdate != null">
                createdate = #{createdate},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from my_travel.hotelcomment
        where id = #{id}
    </delete>

</mapper>